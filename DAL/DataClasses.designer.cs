#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SqlServerDAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="oxcoder")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertChallengeResult(ChallengeResult instance);
    partial void UpdateChallengeResult(ChallengeResult instance);
    partial void DeleteChallengeResult(ChallengeResult instance);
    partial void InsertUserChallenge(UserChallenge instance);
    partial void UpdateUserChallenge(UserChallenge instance);
    partial void DeleteUserChallenge(UserChallenge instance);
    partial void InsertEnterPrise(EnterPrise instance);
    partial void UpdateEnterPrise(EnterPrise instance);
    partial void DeleteEnterPrise(EnterPrise instance);
    partial void InsertEPChallenge(EPChallenge instance);
    partial void UpdateEPChallenge(EPChallenge instance);
    partial void DeleteEPChallenge(EPChallenge instance);
    partial void InsertEPChallengeDetail(EPChallengeDetail instance);
    partial void UpdateEPChallengeDetail(EPChallengeDetail instance);
    partial void DeleteEPChallengeDetail(EPChallengeDetail instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::SqlServerDAL.Properties.Settings.Default.oxcoderConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ChallengeResult> ChallengeResult
		{
			get
			{
				return this.GetTable<ChallengeResult>();
			}
		}
		
		public System.Data.Linq.Table<UserChallenge> UserChallenge
		{
			get
			{
				return this.GetTable<UserChallenge>();
			}
		}
		
		public System.Data.Linq.Table<EnterPrise> EnterPrise
		{
			get
			{
				return this.GetTable<EnterPrise>();
			}
		}
		
		public System.Data.Linq.Table<EPChallenge> EPChallenge
		{
			get
			{
				return this.GetTable<EPChallenge>();
			}
		}
		
		public System.Data.Linq.Table<EPChallengeDetail> EPChallengeDetail
		{
			get
			{
				return this.GetTable<EPChallengeDetail>();
			}
		}
		
		public System.Data.Linq.Table<User> User
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChallengeResult")]
	public partial class ChallengeResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _ID;
		
		private string _UserName;
		
		private string _ChallengeName;
		
		private string _Result;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(decimal value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnChallengeNameChanging(string value);
    partial void OnChallengeNameChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    #endregion
		
		public ChallengeResult()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(20)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChallengeName", DbType="VarChar(20)")]
		public string ChallengeName
		{
			get
			{
				return this._ChallengeName;
			}
			set
			{
				if ((this._ChallengeName != value))
				{
					this.OnChallengeNameChanging(value);
					this.SendPropertyChanging();
					this._ChallengeName = value;
					this.SendPropertyChanged("ChallengeName");
					this.OnChallengeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="VarChar(50)")]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserChallenge")]
	public partial class UserChallenge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _ID;
		
		private string _UserName;
		
		private string _AcceptChallenge;
		
		private System.Nullable<bool> _IsChallenge;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(decimal value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnAcceptChallengeChanging(string value);
    partial void OnAcceptChallengeChanged();
    partial void OnIsChallengeChanging(System.Nullable<bool> value);
    partial void OnIsChallengeChanged();
    #endregion
		
		public UserChallenge()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(20)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcceptChallenge", DbType="VarChar(20)")]
		public string AcceptChallenge
		{
			get
			{
				return this._AcceptChallenge;
			}
			set
			{
				if ((this._AcceptChallenge != value))
				{
					this.OnAcceptChallengeChanging(value);
					this.SendPropertyChanging();
					this._AcceptChallenge = value;
					this.SendPropertyChanged("AcceptChallenge");
					this.OnAcceptChallengeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsChallenge", DbType="Bit")]
		public System.Nullable<bool> IsChallenge
		{
			get
			{
				return this._IsChallenge;
			}
			set
			{
				if ((this._IsChallenge != value))
				{
					this.OnIsChallengeChanging(value);
					this.SendPropertyChanging();
					this._IsChallenge = value;
					this.SendPropertyChanged("IsChallenge");
					this.OnIsChallengeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EnterPrise")]
	public partial class EnterPrise : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _ID;
		
		private string _PhomeNum;
		
		private string _Email;
		
		private string _EPName;
		
		private string _EPAbbreviation;
		
		private System.Nullable<int> _EPScale;
		
		private string _ContactInfo;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(decimal value);
    partial void OnIDChanged();
    partial void OnPhomeNumChanging(string value);
    partial void OnPhomeNumChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEPNameChanging(string value);
    partial void OnEPNameChanged();
    partial void OnEPAbbreviationChanging(string value);
    partial void OnEPAbbreviationChanged();
    partial void OnEPScaleChanging(System.Nullable<int> value);
    partial void OnEPScaleChanged();
    partial void OnContactInfoChanging(string value);
    partial void OnContactInfoChanged();
    #endregion
		
		public EnterPrise()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Decimal(3,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhomeNum", DbType="VarChar(15)")]
		public string PhomeNum
		{
			get
			{
				return this._PhomeNum;
			}
			set
			{
				if ((this._PhomeNum != value))
				{
					this.OnPhomeNumChanging(value);
					this.SendPropertyChanging();
					this._PhomeNum = value;
					this.SendPropertyChanged("PhomeNum");
					this.OnPhomeNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EPName", DbType="VarChar(50)")]
		public string EPName
		{
			get
			{
				return this._EPName;
			}
			set
			{
				if ((this._EPName != value))
				{
					this.OnEPNameChanging(value);
					this.SendPropertyChanging();
					this._EPName = value;
					this.SendPropertyChanged("EPName");
					this.OnEPNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EPAbbreviation", DbType="VarChar(10)")]
		public string EPAbbreviation
		{
			get
			{
				return this._EPAbbreviation;
			}
			set
			{
				if ((this._EPAbbreviation != value))
				{
					this.OnEPAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._EPAbbreviation = value;
					this.SendPropertyChanged("EPAbbreviation");
					this.OnEPAbbreviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EPScale", DbType="Int")]
		public System.Nullable<int> EPScale
		{
			get
			{
				return this._EPScale;
			}
			set
			{
				if ((this._EPScale != value))
				{
					this.OnEPScaleChanging(value);
					this.SendPropertyChanging();
					this._EPScale = value;
					this.SendPropertyChanged("EPScale");
					this.OnEPScaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactInfo", DbType="VarChar(20)")]
		public string ContactInfo
		{
			get
			{
				return this._ContactInfo;
			}
			set
			{
				if ((this._ContactInfo != value))
				{
					this.OnContactInfoChanging(value);
					this.SendPropertyChanging();
					this._ContactInfo = value;
					this.SendPropertyChanged("ContactInfo");
					this.OnContactInfoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EPChallenge")]
	public partial class EPChallenge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _ID;
		
		private string _ReleaseChallenge;
		
		private string _ChallengeID;
		
		private System.Nullable<int> _Number;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(decimal value);
    partial void OnIDChanged();
    partial void OnReleaseChallengeChanging(string value);
    partial void OnReleaseChallengeChanged();
    partial void OnChallengeIDChanging(string value);
    partial void OnChallengeIDChanged();
    partial void OnNumberChanging(System.Nullable<int> value);
    partial void OnNumberChanged();
    #endregion
		
		public EPChallenge()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReleaseChallenge", DbType="VarChar(20)")]
		public string ReleaseChallenge
		{
			get
			{
				return this._ReleaseChallenge;
			}
			set
			{
				if ((this._ReleaseChallenge != value))
				{
					this.OnReleaseChallengeChanging(value);
					this.SendPropertyChanging();
					this._ReleaseChallenge = value;
					this.SendPropertyChanged("ReleaseChallenge");
					this.OnReleaseChallengeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChallengeID", DbType="VarChar(5)")]
		public string ChallengeID
		{
			get
			{
				return this._ChallengeID;
			}
			set
			{
				if ((this._ChallengeID != value))
				{
					this.OnChallengeIDChanging(value);
					this.SendPropertyChanging();
					this._ChallengeID = value;
					this.SendPropertyChanged("ChallengeID");
					this.OnChallengeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int")]
		public System.Nullable<int> Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EPChallengeDetail")]
	public partial class EPChallengeDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _ID;
		
		private string _ChallengeID;
		
		private string _Challenger;
		
		private string _ChallengeResult;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(decimal value);
    partial void OnIDChanged();
    partial void OnChallengeIDChanging(string value);
    partial void OnChallengeIDChanged();
    partial void OnChallengerChanging(string value);
    partial void OnChallengerChanged();
    partial void OnChallengeResultChanging(string value);
    partial void OnChallengeResultChanged();
    #endregion
		
		public EPChallengeDetail()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChallengeID", DbType="VarChar(5)")]
		public string ChallengeID
		{
			get
			{
				return this._ChallengeID;
			}
			set
			{
				if ((this._ChallengeID != value))
				{
					this.OnChallengeIDChanging(value);
					this.SendPropertyChanging();
					this._ChallengeID = value;
					this.SendPropertyChanged("ChallengeID");
					this.OnChallengeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Challenger", DbType="VarChar(20)")]
		public string Challenger
		{
			get
			{
				return this._Challenger;
			}
			set
			{
				if ((this._Challenger != value))
				{
					this.OnChallengerChanging(value);
					this.SendPropertyChanging();
					this._Challenger = value;
					this.SendPropertyChanged("Challenger");
					this.OnChallengerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChallengeResult", DbType="VarChar(50)")]
		public string ChallengeResult
		{
			get
			{
				return this._ChallengeResult;
			}
			set
			{
				if ((this._ChallengeResult != value))
				{
					this.OnChallengeResultChanging(value);
					this.SendPropertyChanging();
					this._ChallengeResult = value;
					this.SendPropertyChanged("ChallengeResult");
					this.OnChallengeResultChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _ID;
		
		private string _UserName;
		
		private string _UserPwd;
		
		private string _PhoneNum;
		
		private string _Email;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(decimal value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserPwdChanging(string value);
    partial void OnUserPwdChanged();
    partial void OnPhoneNumChanging(string value);
    partial void OnPhoneNumChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Decimal(3,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(20)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPwd", DbType="VarChar(20)")]
		public string UserPwd
		{
			get
			{
				return this._UserPwd;
			}
			set
			{
				if ((this._UserPwd != value))
				{
					this.OnUserPwdChanging(value);
					this.SendPropertyChanging();
					this._UserPwd = value;
					this.SendPropertyChanged("UserPwd");
					this.OnUserPwdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNum", DbType="VarChar(15)")]
		public string PhoneNum
		{
			get
			{
				return this._PhoneNum;
			}
			set
			{
				if ((this._PhoneNum != value))
				{
					this.OnPhoneNumChanging(value);
					this.SendPropertyChanging();
					this._PhoneNum = value;
					this.SendPropertyChanged("PhoneNum");
					this.OnPhoneNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
